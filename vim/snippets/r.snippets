snippet lib
	library(${1:package})

snippet req
	require(${1:package})

snippet src
	source("${1:file.R}")

snippet ret
	return(${1:code})

snippet mat
	matrix(${1:data}, nrow = ${2:rows}, ncol = ${3:cols})

snippet sg
	setGeneric("${1:generic}", function(${2:x, ...}) {
		standardGeneric("${1:generic}")
	})

snippet sm
	setMethod("${1:generic}", ${2:class}, function(${2:x, ...}) {
		${0}
	})

snippet sc
	setClass("${1:Class}", slots = c(${2:name = "type"}))

snippet if
	if (${1:condition}) {
		${0}
	}

snippet el
	else {
		${0}
	}

snippet ei
	else if (${1:condition}) {
		${0}
	}

snippet fun
	${1:name} <- function(${2:variables}) {
		${0}
	}

snippet for
	for (${1:variable} in ${2:vector}) {
		${0}
	}

snippet while
	while (${1:condition}) {
		${0}
	}

snippet switch
	switch (${1:object},
		${2:case} = ${3:action}
	)

snippet apply
	apply(${1:array}, ${2:margin}, ${3:...})

snippet lapply
	lapply(${1:list}, ${2:function})

snippet sapply
	sapply(${1:list}, ${2:function})

snippet mapply
	mapply(${1:function}, ${2:...})

snippet tapply
	tapply(${1:vector}, ${2:index}, ${3:function})

snippet vapply
	vapply(${1:list}, ${2:function}, FUN.VALUE = ${3:type}, ${4:...})

snippet rapply
	rapply(${1:list}, ${2:function})

snippet ts
	`r paste("#", date(), "------------------------------\n")`

snippet shinyapp
	library(shiny)

	ui <- fluidPage(
	  ${0}
	)

	server <- function(input, output, session) {

	}

	shinyApp(ui, server)

snippet shinymod
	${1:name}_UI <- function(id) {
	  ns <- NS(id)
	  tagList(
		${0}
	  )
	}

	${1:name} <- function(input, output, session) {

	}

snippet ifrds
	if (!file.exists('rds/${1:varname}.rds')) {

		saveRDS(${1:varname}, file = 'rds/${1:varname}.rds')
	} else {
		${1:varname} = readRDS('rds/${1:varname}.rds')
	}

snippet swapcolname
	i1 <- match(colnames(${1:df1}), ${2:annotationdf}\$ ${3:oldcolnames}, nomatch=0)
	colnames(${1:df1})[i1] <- as.character(${2:annotationdf}\$ ${4:newcolnames}[i1])

snippet selectcol
	# by colname
	${1:df} = subset(${1:df}, select = c(${2:col1name},${3:col2name}))
	#by index
	${1:df} <- ${1:df}[ -c(${2:col1indx},${2:col2indx}:${3:col2indx})]
	#by regex
	${1:df} = ${1:df}[,grepl("_A$",names(${1:df}))]


snippet biomart
	library(biomaRt)
	ensembl <- useMart("ensembl", dataset="hsapiens_gene_ensembl")
	# poissible attributes
	listAttributes(ensembl)
	gene_coords=getBM(
		attributes=c("chromosome_name","hgnc_symbol","ensembl_gene_id", "ensembl_transcript_id" "start_position","end_position"),
		filters="ensembl_gene_id",
		values=${1:listtosubmit},
		mart=ensembl)
